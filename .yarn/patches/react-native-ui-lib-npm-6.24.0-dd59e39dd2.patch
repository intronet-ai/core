diff --git a/react-native.config.js b/react-native.config.js
index fe49ca64f71a5109b8dc6cdbb3f806e889c0e8e1..e9969e402a036334cafa43df2a89048c009ea90d 100644
--- a/react-native.config.js
+++ b/react-native.config.js
@@ -2,7 +2,8 @@ module.exports = {
   dependency: {
     platforms: {
       ios: {
-        project: './lib/ios/'
+        project: './lib/ios/',
+        podspecPath: './lib/ReactNativeUiLib.podspec'
       },
       android: {
         sourceDir: './lib/android/',
diff --git a/src/components/featureHighlight/index.js b/src/components/featureHighlight/index.js
index 8c3e14bd9540dca481708dd8b6874f33966bcf79..5744f826c3039a066b9e94338d884b1589743e94 100644
--- a/src/components/featureHighlight/index.js
+++ b/src/components/featureHighlight/index.js
@@ -1,13 +1,20 @@
-import React, { Component } from 'react';
-import { StyleSheet, findNodeHandle, TouchableWithoutFeedback, Animated, AccessibilityInfo } from 'react-native';
-import { Colors, Typography } from "../../style";
-import { Constants, asBaseComponent } from "../../commons/new";
-import View from "../view";
-import Text from "../text";
-import Button, { ButtonSize } from "../button";
-import PageControl from "../pageControl";
+import React, {Component} from 'react';
+import {
+  AccessibilityInfo,
+  Animated,
+  findNodeHandle,
+  Pressable,
+  StyleSheet,
+  TouchableWithoutFeedback
+} from 'react-native';
+import {asBaseComponent, Constants} from '../../commons/new';
+import {Colors, Typography} from '../../style';
+import Button, {ButtonSize} from '../button';
+import PageControl from '../pageControl';
+import Text from '../text';
+import View from '../view';
 //@ts-expect-error
-import { HighlighterOverlayView } from "../../nativeComponents";
+import {HighlighterOverlayView} from '../../nativeComponents';
 const defaultOverlayColor = Colors.rgba(Colors.black, 0.82);
 const defaultTextColor = Colors.white;
 const defaultStrokeColor = Colors.rgba(Colors.white, 0.12);
@@ -67,7 +74,11 @@ class FeatureHighlight extends Component {
     return null;
   }
   shouldSetTargetPosition = nextProps => {
-    return nextProps.getTarget?.() !== this.props.getTarget?.() || nextProps.title !== this.props.title || nextProps.visible !== this.props.visible;
+    return (
+      nextProps.getTarget?.() !== this.props.getTarget?.() ||
+      nextProps.title !== this.props.title ||
+      nextProps.visible !== this.props.visible
+    );
   };
   componentDidUpdate(nextProps) {
     if (this.shouldSetTargetPosition(nextProps)) {
@@ -86,16 +97,17 @@ class FeatureHighlight extends Component {
   }
   animate(toValue) {
     Animated.timing(
-    // Animate over time
-    this.state.fadeAnim,
-    // The animated value to drive
-    {
-      toValue,
-      // Animate to value
-      duration: toValue ? 100 : 0,
-      // Make it take a while
-      useNativeDriver: true
-    }).start(); // Starts the animation
+      // Animate over time
+      this.state.fadeAnim,
+      // The animated value to drive
+      {
+        toValue,
+        // Animate to value
+        duration: toValue ? 100 : 0,
+        // Make it take a while
+        useNativeDriver: true
+      }
+    ).start(); // Starts the animation
   }

   setTargetPosition(props = this.props) {
@@ -135,10 +147,7 @@ class FeatureHighlight extends Component {
       },
       innerPadding = 0
     } = this.props;
-    const {
-      top,
-      height
-    } = this.targetPosition || {
+    const {top, height} = this.targetPosition || {
       top: 0,
       height: 0
     };
@@ -152,7 +161,9 @@ class FeatureHighlight extends Component {
       topPosition = isUnderMin ? topPosition + innerPadding : targetCenter + minRectHeight / 2 + innerPadding / 2;
     }
     if (topPosition < 0 || topPosition + this.contentHeight > Constants.screenHeight) {
-      console.warn(`Content is too long and might appear off screen. Please adjust the message length for better results.`);
+      console.warn(
+        `Content is too long and might appear off screen. Please adjust the message length for better results.`
+      );
     }
     return topPosition;
   }
@@ -175,11 +186,46 @@ class FeatureHighlight extends Component {
     this.animate(0);
     this.contentHeight = contentViewHeight;
     this.targetPosition = undefined;
-    const {
-      confirmButtonProps
-    } = this.props;
+    const {confirmButtonProps} = this.props;
     confirmButtonProps?.onPress?.();
   };
+  renderDismissButton() {
+    const {titleStyle, pageControlProps, onDismissButtonPress} = this.props;
+
+    return (
+      <Pressable
+        testID="tour-dismiss-button"
+        onPress={onDismissButtonPress}
+        style={{
+          top: pageControlProps.containerStyle.top,
+          right: 20,
+          position: 'absolute'
+        }}
+      >
+        <Animated.View
+          style={{
+            opacity: this.state.fadeAnim
+          }}
+        >
+          <Text
+            text60
+            style={[
+              styles.title,
+              {
+                color: 'white'
+              },
+              titleStyle
+            ]}
+            numberOfLines={1}
+            // @ts-expect-error
+            pointerEvents={'none'}
+          >
+            Close
+          </Text>
+        </Animated.View>
+      </Pressable>
+    );
+  }
   renderHighlightMessage() {
     const {
       title,
@@ -193,38 +239,78 @@ class FeatureHighlight extends Component {
       pageControlProps
     } = this.props;
     const color = textColor || defaultTextColor;
-    return <Animated.View style={[styles.highlightContent, {
-      opacity: this.state.fadeAnim,
-      top: this.state.contentTopPosition
-    }]} onLayout={this.getComponentDimensions} pointerEvents="box-none" ref={!pageControlProps ? r => {
-      this.viewRef = r;
-    } : undefined}>
-        {title && <Text text60 style={[styles.title, {
-        color,
-        marginBottom: message ? titleBottomMargin : messageBottomMargin
-      }, titleStyle]} numberOfLines={titleNumberOfLines}
-      // @ts-expect-error
-      pointerEvents={'none'}>
+    return (
+      <Animated.View
+        style={[
+          styles.highlightContent,
+          {
+            opacity: this.state.fadeAnim,
+            top: this.state.contentTopPosition
+          }
+        ]}
+        onLayout={this.getComponentDimensions}
+        pointerEvents="box-none"
+        ref={
+          !pageControlProps
+            ? r => {
+                this.viewRef = r;
+              }
+            : undefined
+        }
+      >
+        {title && (
+          <Text
+            text60
+            style={[
+              styles.title,
+              {
+                color,
+                marginBottom: message ? titleBottomMargin : messageBottomMargin
+              },
+              titleStyle
+            ]}
+            numberOfLines={titleNumberOfLines}
+            // @ts-expect-error
+            pointerEvents={'none'}
+          >
             {title}
-          </Text>}
-        {message && <Text text70 style={[styles.message, {
-        color
-      }, messageStyle]} numberOfLines={messageNumberOfLines}
-      // @ts-expect-error
-      pointerEvents={'none'}>
+          </Text>
+        )}
+        {message && (
+          <Text
+            text70
+            style={[
+              styles.message,
+              {
+                color
+              },
+              messageStyle
+            ]}
+            numberOfLines={messageNumberOfLines}
+            // @ts-expect-error
+            pointerEvents={'none'}
+          >
             {message}
-          </Text>}
-        <Button label={defaultButtonLabel} size={ButtonSize.medium} labelStyle={{
-        ...Typography.text80,
-        fontWeight: '700'
-      }} outline outlineColor={color} activeBackgroundColor={Colors.rgba(color, 0.3)} {...confirmButtonProps} onPress={this.onPress} />
-      </Animated.View>;
+          </Text>
+        )}
+        <Button
+          label={defaultButtonLabel}
+          size={ButtonSize.medium}
+          labelStyle={{
+            ...Typography.text80,
+            fontWeight: '700'
+          }}
+          outline
+          outlineColor={color}
+          activeBackgroundColor={Colors.rgba(color, 0.3)}
+          {...confirmButtonProps}
+          onPress={this.onPress}
+        />
+      </Animated.View>
+    );
   }
   render() {
-    const {
-      node,
-      contentTopPosition
-    } = this.state;
+    const {node, contentTopPosition} = this.state;
     if (contentTopPosition === undefined) {
       return null;
     }
@@ -241,17 +327,40 @@ class FeatureHighlight extends Component {
       borderRadius,
       pageControlProps
     } = this.props;
-    return <HighlighterOverlayView testID={testID} highlightViewTag={node} highlightFrame={highlightFrame} visible={visible} overlayColor={overlayColor || defaultOverlayColor} strokeColor={borderColor || defaultStrokeColor} strokeWidth={borderWidth || defaultStrokeWidth} minimumRectSize={minimumRectSize} innerPadding={innerPadding} borderRadius={borderRadius} accessible={false}>
+    return (
+      <HighlighterOverlayView
+        testID={testID}
+        highlightViewTag={node}
+        highlightFrame={highlightFrame}
+        visible={visible}
+        overlayColor={overlayColor || defaultOverlayColor}
+        strokeColor={borderColor || defaultStrokeColor}
+        strokeWidth={borderWidth || defaultStrokeWidth}
+        minimumRectSize={minimumRectSize}
+        innerPadding={innerPadding}
+        borderRadius={borderRadius}
+        accessible={false}
+      >
         <TouchableWithoutFeedback style={styles.touchableOverlay} onPress={onBackgroundPress}>
-          {pageControlProps ? <View flex bottom>
-              <PageControl {...pageControlProps} containerStyle={{
-            marginBottom: 24
-          }} ref={r => this.viewRef = r} />
+          {pageControlProps ? (
+            <View flex bottom>
+              <PageControl
+                containerStyle={{
+                  marginBottom: 24
+                }}
+                {...pageControlProps}
+                ref={r => (this.viewRef = r)}
+              />
               <View accessible accessibilityLabel={'dismiss button'} />
-            </View> : <View flex accessible accessibilityLabel={'dismiss'} accessibilityRole={'button'} />}
+            </View>
+          ) : (
+            <View flex accessible accessibilityLabel={'dismiss'} accessibilityRole={'button'} />
+          )}
         </TouchableWithoutFeedback>
         {this.renderHighlightMessage()}
-      </HighlighterOverlayView>;
+        {this.renderDismissButton()}
+      </HighlighterOverlayView>
+    );
   }
 }
 const styles = StyleSheet.create({
@@ -274,6 +383,6 @@ const styles = StyleSheet.create({
     ...StyleSheet.absoluteFillObject
   }
 });
-export { FeatureHighlight as testable };
+export {FeatureHighlight as testable};
 //@ts-ignore typescript - will be fixed when moved to functional component
 export default asBaseComponent(FeatureHighlight);
