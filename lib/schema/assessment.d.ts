import { z } from 'zod';
export declare const assessmentValueSchema: z.ZodObject<{
    createdAt: z.ZodType<import("../utils/TimestampStub").TimestampStub, z.ZodTypeDef, import("../utils/TimestampStub").TimestampStub>;
    updatedAt: z.ZodType<import("../utils/TimestampStub").TimestampStub, z.ZodTypeDef, import("../utils/TimestampStub").TimestampStub>;
    assessmentRequestId: z.ZodString;
    seekerResponseId: z.ZodString;
    seekerAskId: z.ZodString;
    providerResponseId: z.ZodString;
    runId: z.ZodString;
    score: z.ZodNumber;
    humanScore: z.ZodOptional<z.ZodNumber>;
    explanation: z.ZodString;
    isSelected: z.ZodOptional<z.ZodBoolean>;
    introRequestedAt: z.ZodOptional<z.ZodType<import("../utils/TimestampStub").TimestampStub, z.ZodTypeDef, import("../utils/TimestampStub").TimestampStub>>;
    introRequestText: z.ZodOptional<z.ZodString>;
    communityId: z.ZodString;
    communityName: z.ZodOptional<z.ZodString>;
    providerName: z.ZodOptional<z.ZodString>;
    providerEmail: z.ZodOptional<z.ZodString>;
    providerHeadline: z.ZodOptional<z.ZodString>;
    providerPhotoStoragePath: z.ZodOptional<z.ZodString>;
    seekerName: z.ZodOptional<z.ZodString>;
    seekerEmail: z.ZodOptional<z.ZodString>;
    askSummary: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    createdAt: import("../utils/TimestampStub").TimestampStub;
    updatedAt: import("../utils/TimestampStub").TimestampStub;
    assessmentRequestId: string;
    seekerResponseId: string;
    seekerAskId: string;
    providerResponseId: string;
    runId: string;
    score: number;
    explanation: string;
    communityId: string;
    humanScore?: number | undefined;
    isSelected?: boolean | undefined;
    introRequestedAt?: import("../utils/TimestampStub").TimestampStub | undefined;
    introRequestText?: string | undefined;
    communityName?: string | undefined;
    providerName?: string | undefined;
    providerEmail?: string | undefined;
    providerHeadline?: string | undefined;
    providerPhotoStoragePath?: string | undefined;
    seekerName?: string | undefined;
    seekerEmail?: string | undefined;
    askSummary?: string | undefined;
}, {
    createdAt: import("../utils/TimestampStub").TimestampStub;
    updatedAt: import("../utils/TimestampStub").TimestampStub;
    assessmentRequestId: string;
    seekerResponseId: string;
    seekerAskId: string;
    providerResponseId: string;
    runId: string;
    score: number;
    explanation: string;
    communityId: string;
    humanScore?: number | undefined;
    isSelected?: boolean | undefined;
    introRequestedAt?: import("../utils/TimestampStub").TimestampStub | undefined;
    introRequestText?: string | undefined;
    communityName?: string | undefined;
    providerName?: string | undefined;
    providerEmail?: string | undefined;
    providerHeadline?: string | undefined;
    providerPhotoStoragePath?: string | undefined;
    seekerName?: string | undefined;
    seekerEmail?: string | undefined;
    askSummary?: string | undefined;
}>;
export type AssessmentValue = z.infer<typeof assessmentValueSchema>;
