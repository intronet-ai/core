import { z } from 'zod';
type EmailPreferenceKey = 'emailInsideCommunities' | 'emailOutsideCommunities';
export declare const userSchema: z.ZodObject<{
    createdAt: z.ZodType<import("../utils/TimestampStub").TimestampStub, z.ZodTypeDef, import("../utils/TimestampStub").TimestampStub>;
    updatedAt: z.ZodType<import("../utils/TimestampStub").TimestampStub, z.ZodTypeDef, import("../utils/TimestampStub").TimestampStub>;
    uid: z.ZodString;
    name: z.ZodString;
    communityId: z.ZodOptional<z.ZodString>;
    photoStoragePath: z.ZodOptional<z.ZodString>;
    phoneNumber: z.ZodOptional<z.ZodString>;
    emailPreferences: z.ZodOptional<z.ZodObject<{
        emailInsideCommunities: z.ZodBoolean;
        emailOutsideCommunities: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        emailInsideCommunities: boolean;
        emailOutsideCommunities: boolean;
    }, {
        emailInsideCommunities: boolean;
        emailOutsideCommunities: boolean;
    }>>;
    linkedinUser: z.ZodOptional<z.ZodObject<{
        accomplishment_patents: z.ZodArray<z.ZodAny, "many">;
        country: z.ZodString;
        occupation: z.ZodString;
        education: z.ZodArray<z.ZodAny, "many">;
        gender: z.ZodString;
        city: z.ZodString;
        people_also_viewed: z.ZodArray<z.ZodAny, "many">;
        birth_date: z.ZodNullable<z.ZodString>;
        inferred_salary: z.ZodObject<{
            min: z.ZodNullable<z.ZodNumber>;
            max: z.ZodNullable<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            min: number | null;
            max: number | null;
        }, {
            min: number | null;
            max: number | null;
        }>;
        background_cover_image_url: z.ZodString;
        industry: z.ZodString;
        follower_count: z.ZodNullable<z.ZodNumber>;
        recommendations: z.ZodArray<z.ZodString, "many">;
        skills: z.ZodArray<z.ZodString, "many">;
        accomplishment_publications: z.ZodArray<z.ZodAny, "many">;
        extra: z.ZodObject<{
            github_profile_id: z.ZodNullable<z.ZodString>;
            twitter_profile_id: z.ZodNullable<z.ZodString>;
            facebook_profile_id: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            github_profile_id: string | null;
            twitter_profile_id: string | null;
            facebook_profile_id: string | null;
        }, {
            github_profile_id: string | null;
            twitter_profile_id: string | null;
            facebook_profile_id: string | null;
        }>;
        personal_numbers: z.ZodArray<z.ZodAny, "many">;
        state: z.ZodString;
        volunteer_work: z.ZodArray<z.ZodAny, "many">;
        public_identifier: z.ZodString;
        profile_pic_url: z.ZodString;
        first_name: z.ZodString;
        headline: z.ZodString;
        connections: z.ZodNumber;
        summary: z.ZodString;
        similarly_named_users: z.ZodArray<z.ZodAny, "many">;
        languages: z.ZodArray<z.ZodString, "many">;
        accomplishment_courses: z.ZodArray<z.ZodAny, "many">;
        groups: z.ZodArray<z.ZodAny, "many">;
        last_name: z.ZodString;
        certifications: z.ZodArray<z.ZodAny, "many">;
        experiences: z.ZodArray<z.ZodAny, "many">;
        country_full_name: z.ZodString;
        full_name: z.ZodString;
        accomplishment_organisations: z.ZodArray<z.ZodAny, "many">;
        activities: z.ZodArray<z.ZodAny, "many">;
        personal_emails: z.ZodArray<z.ZodString, "many">;
        accomplishment_test_scores: z.ZodArray<z.ZodAny, "many">;
        interests: z.ZodArray<z.ZodAny, "many">;
        articles: z.ZodArray<z.ZodAny, "many">;
        accomplishment_projects: z.ZodArray<z.ZodAny, "many">;
        accomplishment_honors_awards: z.ZodArray<z.ZodAny, "many">;
    }, "strip", z.ZodTypeAny, {
        summary: string;
        state: string;
        accomplishment_patents: any[];
        country: string;
        occupation: string;
        education: any[];
        gender: string;
        city: string;
        people_also_viewed: any[];
        birth_date: string | null;
        inferred_salary: {
            min: number | null;
            max: number | null;
        };
        background_cover_image_url: string;
        industry: string;
        follower_count: number | null;
        recommendations: string[];
        skills: string[];
        accomplishment_publications: any[];
        extra: {
            github_profile_id: string | null;
            twitter_profile_id: string | null;
            facebook_profile_id: string | null;
        };
        personal_numbers: any[];
        volunteer_work: any[];
        public_identifier: string;
        profile_pic_url: string;
        first_name: string;
        headline: string;
        connections: number;
        similarly_named_users: any[];
        languages: string[];
        accomplishment_courses: any[];
        groups: any[];
        last_name: string;
        certifications: any[];
        experiences: any[];
        country_full_name: string;
        full_name: string;
        accomplishment_organisations: any[];
        activities: any[];
        personal_emails: string[];
        accomplishment_test_scores: any[];
        interests: any[];
        articles: any[];
        accomplishment_projects: any[];
        accomplishment_honors_awards: any[];
    }, {
        summary: string;
        state: string;
        accomplishment_patents: any[];
        country: string;
        occupation: string;
        education: any[];
        gender: string;
        city: string;
        people_also_viewed: any[];
        birth_date: string | null;
        inferred_salary: {
            min: number | null;
            max: number | null;
        };
        background_cover_image_url: string;
        industry: string;
        follower_count: number | null;
        recommendations: string[];
        skills: string[];
        accomplishment_publications: any[];
        extra: {
            github_profile_id: string | null;
            twitter_profile_id: string | null;
            facebook_profile_id: string | null;
        };
        personal_numbers: any[];
        volunteer_work: any[];
        public_identifier: string;
        profile_pic_url: string;
        first_name: string;
        headline: string;
        connections: number;
        similarly_named_users: any[];
        languages: string[];
        accomplishment_courses: any[];
        groups: any[];
        last_name: string;
        certifications: any[];
        experiences: any[];
        country_full_name: string;
        full_name: string;
        accomplishment_organisations: any[];
        activities: any[];
        personal_emails: string[];
        accomplishment_test_scores: any[];
        interests: any[];
        articles: any[];
        accomplishment_projects: any[];
        accomplishment_honors_awards: any[];
    }>>;
    karma: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    createdAt: import("../utils/TimestampStub").TimestampStub;
    updatedAt: import("../utils/TimestampStub").TimestampStub;
    name: string;
    uid: string;
    karma: number;
    communityId?: string | undefined;
    phoneNumber?: string | undefined;
    linkedinUser?: {
        summary: string;
        state: string;
        accomplishment_patents: any[];
        country: string;
        occupation: string;
        education: any[];
        gender: string;
        city: string;
        people_also_viewed: any[];
        birth_date: string | null;
        inferred_salary: {
            min: number | null;
            max: number | null;
        };
        background_cover_image_url: string;
        industry: string;
        follower_count: number | null;
        recommendations: string[];
        skills: string[];
        accomplishment_publications: any[];
        extra: {
            github_profile_id: string | null;
            twitter_profile_id: string | null;
            facebook_profile_id: string | null;
        };
        personal_numbers: any[];
        volunteer_work: any[];
        public_identifier: string;
        profile_pic_url: string;
        first_name: string;
        headline: string;
        connections: number;
        similarly_named_users: any[];
        languages: string[];
        accomplishment_courses: any[];
        groups: any[];
        last_name: string;
        certifications: any[];
        experiences: any[];
        country_full_name: string;
        full_name: string;
        accomplishment_organisations: any[];
        activities: any[];
        personal_emails: string[];
        accomplishment_test_scores: any[];
        interests: any[];
        articles: any[];
        accomplishment_projects: any[];
        accomplishment_honors_awards: any[];
    } | undefined;
    photoStoragePath?: string | undefined;
    emailPreferences?: {
        emailInsideCommunities: boolean;
        emailOutsideCommunities: boolean;
    } | undefined;
}, {
    createdAt: import("../utils/TimestampStub").TimestampStub;
    updatedAt: import("../utils/TimestampStub").TimestampStub;
    name: string;
    uid: string;
    communityId?: string | undefined;
    phoneNumber?: string | undefined;
    linkedinUser?: {
        summary: string;
        state: string;
        accomplishment_patents: any[];
        country: string;
        occupation: string;
        education: any[];
        gender: string;
        city: string;
        people_also_viewed: any[];
        birth_date: string | null;
        inferred_salary: {
            min: number | null;
            max: number | null;
        };
        background_cover_image_url: string;
        industry: string;
        follower_count: number | null;
        recommendations: string[];
        skills: string[];
        accomplishment_publications: any[];
        extra: {
            github_profile_id: string | null;
            twitter_profile_id: string | null;
            facebook_profile_id: string | null;
        };
        personal_numbers: any[];
        volunteer_work: any[];
        public_identifier: string;
        profile_pic_url: string;
        first_name: string;
        headline: string;
        connections: number;
        similarly_named_users: any[];
        languages: string[];
        accomplishment_courses: any[];
        groups: any[];
        last_name: string;
        certifications: any[];
        experiences: any[];
        country_full_name: string;
        full_name: string;
        accomplishment_organisations: any[];
        activities: any[];
        personal_emails: string[];
        accomplishment_test_scores: any[];
        interests: any[];
        articles: any[];
        accomplishment_projects: any[];
        accomplishment_honors_awards: any[];
    } | undefined;
    photoStoragePath?: string | undefined;
    emailPreferences?: {
        emailInsideCommunities: boolean;
        emailOutsideCommunities: boolean;
    } | undefined;
    karma?: number | undefined;
}>;
export type User = z.infer<typeof userSchema>;
export declare const DEFAULT_EMAIL_PREFERENCES: {
    [key in EmailPreferenceKey]: boolean;
};
export {};
